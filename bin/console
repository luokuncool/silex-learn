#!/usr/bin/env php
<?php

use Doctrine\DBAL\DriverManager;
use Silex\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

set_time_limit(0);
/** @var Application $app */
$app = require_once __DIR__ . '/../bootstrap.php';

$console = $app['console'];

$console
    ->register('db:create')
    ->setDescription('Creates the configured database')
    ->addOption('connection', null, InputOption::VALUE_OPTIONAL, 'The connection to use for this command')
    ->setHelp(
        <<<EOT
The <info>doctrine:database:create</info> command creates the default
connections database:

<info>php app/console doctrine:database:create</info>

You can also optionally specify the name of a connection to create the
database for:

<info>php app/console doctrine:database:create --connection=default</info>
EOT
    )
    ->setCode(
        function (InputInterface $input, OutputInterface $output) use ($app) {
            $connection = $app['db'];

            $params = $connection->getParams();
            $name   = isset($params['path']) ? $params['path'] : $params['dbname'];

            unset($params['dbname']);

            $tmpConnection = DriverManager::getConnection($params);

            if (!isset($params['path'])) {
                $name = $tmpConnection->getDatabasePlatform()->quoteSingleIdentifier($name);
            }

            $error = false;
            try {
                $tmpConnection->getSchemaManager()->createDatabase($name);
                $output->writeln(
                    sprintf('<info>Created database for connection named <comment>%s</comment></info>', $name)
                );
            } catch (\Exception $e) {
                $output->writeln(
                    sprintf(
                        '<error>Could not create database for connection named <comment>%s</comment></error>',
                        $name
                    )
                );
                $output->writeln(sprintf('<error>%s</error>', $e->getMessage()));
                $error = true;
            }

            $tmpConnection->close();

            return $error ? 1 : 0;
        }
    );

$console
    ->register('db:drop')
    ->setDescription('Drop the configured database')
    ->addOption('connection', null, InputOption::VALUE_OPTIONAL, 'The connection to use for this command')
    ->addOption('force', null, InputOption::VALUE_NONE, 'Set this parameter to execute this action')
    ->setHelp(
        <<<EOT
The <info>doctrine:database:drop</info> command drops the default connections
database:

<info>php app/console doctrine:database:drop</info>

The --force parameter has to be used to actually drop the database.

You can also optionally specify the name of a connection to drop the database
for:

<info>php app/console doctrine:database:drop --connection=default</info>

<error>Be careful: All data in a given database will be lost when executing
this command.</error>
EOT
    )
    ->setCode(
        function (InputInterface $input, OutputInterface $output) use ($app) {

            $params = $app['db']->getParams();

            $name = isset($params['path']) ? $params['path'] : (isset($params['dbname']) ? $params['dbname'] : false);

            if (!$name) {
                throw new \InvalidArgumentException(
                    "Connection does not contain a 'path' or 'dbname' parameter and cannot be dropped."
                );
            }

            if ($input->getOption('force')) {
                // Only quote if we don't have a path
                if (!isset($params['path'])) {
                    $name = $app['db']->getDatabasePlatform()->quoteSingleIdentifier($name);
                }

                try {
                    $app['db']->getSchemaManager()->dropDatabase($name);
                    $output->writeln(
                        sprintf('<info>Dropped database for connection named <comment>%s</comment></info>', $name)
                    );
                } catch (\Exception $e) {
                    $output->writeln(
                        sprintf(
                            '<error>Could not drop database for connection named <comment>%s</comment></error>',
                            $name
                        )
                    );
                    $output->writeln(sprintf('<error>%s</error>', $e->getMessage()));

                    return 1;
                }
            } else {
                $output->writeln(
                    '<error>ATTENTION:</error> This operation should not be executed in a production environment.'
                );
                $output->writeln('');
                $output->writeln(sprintf('<info>Would drop the database named <comment>%s</comment>.</info>', $name));
                $output->writeln('Please run the operation with --force to execute');
                $output->writeln('<error>All data will be lost!</error>');

                return 2;
            }
        }
    );

$console
    ->register('db:schema:show')
    ->setDescription('Output schema declaration')
    ->setCode(
        function (InputInterface $input, OutputInterface $output) use ($app) {
            foreach (\SilexLearn\Config\Schema::get()->toSql($app['db']->getDatabasePlatform()) as $sql) {
                $output->writeln($sql . ';');
            }
        }
    );


$console
    ->register('db:schema:create')
    ->setDescription('Create schema')
    ->setCode(
        function (InputInterface $input, OutputInterface $output) use ($app) {
            foreach (\SilexLearn\Config\Schema::get()->toSql($app['db']->getDatabasePlatform()) as $sql) {
                $app['db']->exec($sql);
            }
        }
    );

$console->run();